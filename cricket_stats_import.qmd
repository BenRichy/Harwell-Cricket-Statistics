Get cricket stats from play cricket

API details here: https://play-cricket.ecb.co.uk/hc/en-us/sections/360000978518-API-Experienced-Developers-Only

```{r LoadPackages}
library(httr)
library(jsonlite)
library(readr)
library(dplyr)
library(stringr)
library(DBI)

```

```{r Globals}
season <- 2024
team_name <- "Harwell"
club_name <- "Harwell International CC"


```


```{r FilePaths}
FP_api_key <- "data/playcricket_api_key.txt"
FP_club_id <- "data/playcricket_club_id.txt"
FP_results_summary <- "data/results_summary.csv"
FP_data_base <- "data/cricket_detail_database.sqlite"



```


```{r GetSummaryData}
# read in the api and club id
api_key <- readLines(FP_api_key)
club_id <- readLines(FP_club_id)

# get the list of matches for the defined season
get_matches_query <- sprintf(
    "http://play-cricket.com/api/v2/result_summary.json?&site_id=%s&season=%s&api_token=%s",
    club_id,
    season,
    api_key
)

results_return <- GET(get_matches_query)
results_data <- fromJSON(rawToChar(results_return$content))$result_summary

# write df of results data to a csv
write_csv(results_data, FP_results_summary)


```


```{r GetDetailedData}

# read in csv of summary results
results_data <- read_csv(FP_results_summary)

# define dataframes for data to be returned into
data_players <- data.frame()
data_batting <- data.frame()
data_partnerships <- data.frame()
data_bowling <- data.frame()

# loop through the summary results, and get the detailed results for each match
for (i in 1:nrow(results_data)) {
    # get the match id
    match_id <- results_data[i, "id"][[1]]

    # set the gettter
    get_matches_detail_query <- sprintf(
        "http://play-cricket.com/api/v2/match_detail.json?&match_id=%s&api_token=%s",
        match_id,
        api_key
    )

    # get the detailed match data
    results_detail_return <- GET(get_matches_detail_query)
    # pull out the detail
    results_detail_data <- fromJSON(rawToChar(results_detail_return$content))$match_details

    # if the result was cancelled then go to the next match
    if (results_detail_data["result"][[1]] == "C") {
        next
    }

    # get the list of players in the teams
    results_detail_players_home <- results_detail_data$players[[1]]$home_team[[1]]
    results_detail_players_away <- results_detail_data$players[[1]]$away_team[[1]]

    # get the detailed data
    results_detail_innings <- results_detail_data$innings[[1]]

    # find the row that the club is on
    # this is the club's batting innings
    results_detail_innings_bat <- results_detail_innings |>
        filter(grepl(paste0(".*", team_name, ".*"), team_batting_name))

    # get the data of the batting score card
    results_detail_batting <- results_detail_innings_bat$bat[[1]]
    # get the data of the fall of wickets
    results_detail_partnerships <- results_detail_innings_bat$fow[[1]]

    # filter the innings data for the row that the club is not on
    # this is the club's bowling figures
    results_detail_innings_bowl <- results_detail_innings |>
        filter(!grepl(paste0(".*", team_name, ".*"), team_batting_name))
    # get the data of the fbowling score card
    results_detail_bowling <- results_detail_innings_bowl$bowl[[1]]


    # write data to the dataframes
    data_players <- data_players |> bind_rows(results_detail_players_home |> mutate(match_id = match_id))
    data_batting <- data_batting |> bind_rows(results_detail_batting |> mutate(match_id = match_id))
    data_partnerships <- data_partnerships |> bind_rows(results_detail_partnerships |> mutate(match_id = match_id))
    data_bowling <- data_bowling |> bind_rows(results_detail_bowling |> mutate(match_id = match_id))
}

```


Create meta data tables to work with the database
```{r CleanData}

# create table to map dismissals in play-cricket to clean names
batting_dismissals <- tribble(
    ~pc_dismissal, ~clean_dismissal,
    "b", "Bowled",
    "ct", "Caught",
    "lbw", "LBW",
    "not out", "Not Out",
    "did not bat", "DNB",
    "run out", "Run Out",
    "st", "Stumped",
    "retired not out", "Retired Not Out"
)

# need to sum up the number of overs/balls so that these can be grouped later
# split the overs by the period (.)
data_bowling_clean <- data_bowling |>
    mutate(separated_overs = str_split(overs, "\\."))

# loop through rows
for (i in 1:nrow(data_bowling_clean)) {
    # determine the number of completed overs
    data_bowling_clean[i, "complete_overs"] <- as.numeric(data_bowling_clean$separated_overs[[i]][1])

    # determine the number of remaining balls
    data_bowling_clean[i, "residual_balls"] <- as.numeric(data_bowling_clean$separated_overs[[i]][2])
}

# calculate how many balls the bowler bowled a match
data_bowling_clean <- data_bowling_clean |>
    mutate(
        residual_balls = case_when(
            is.na(residual_balls) ~ 0,
            TRUE ~ residual_balls
        ),
        ball_count = complete_overs * 6 + residual_balls
    )

# calculate the number of runs in each partnership
data_partnerships_clean <- data_partnerships |>
    mutate(partnership_runs = NA_integer_)

# loop over rows
for (i in 1:nrow(data_partnerships_clean)) {
    # if the wicket is the first to fall, just get the runs
    if (data_partnerships_clean[i, "wickets"] == 1) {
        data_partnerships_clean[i, "partnership_runs"] <- data_partnerships_clean[i, "runs"]
        # if not the first to fall, find the difference between it and the run above,
        # check if the match id is the same as the row above though
    } else if (data_partnerships_clean[i, "match_id"] == data_partnerships_clean[i - 1, "match_id"]) {
        data_partnerships_clean[i, "partnership_runs"] <- (as.numeric(data_partnerships_clean[i, "runs"]) - as.numeric(data_partnerships_clean[i - 1, "runs"]))
    }
}



```

Create a database that contains all of the data for the team
```{r CreateDatabase}

# tidy the names up, and remove columns that the database won't accept
players <- data_players
batting <- data_batting
partnerships <- data_partnerships_clean
bowling <- data_bowling_clean |> select(-separated_overs)

results <- results_data |>
    mutate(
        opposition = case_when(
            away_club_name == club_name ~ home_club_name,
            TRUE ~ away_club_name
        ),
        home_away = case_when(
            away_club_name == club_name ~ "Home",
            TRUE ~ "Away"
        ),
        league_name = case_when(
            is.na(league_name) ~ "Friendly",
            TRUE ~ league_name
        )
    ) |>
    select(
        id,
        match_date,
        opposition,
        toss,
        result,
        result_description,
        league_name
    )

# create database
cricket_database <- dbConnect(RSQLite::SQLite(), FP_data_base)

# write tables to database
dbWriteTable(cricket_database, "players", players, overwrite = TRUE)
dbWriteTable(cricket_database, "batting", batting, overwrite = TRUE)
dbWriteTable(cricket_database, "partnerships", partnerships, overwrite = TRUE)
dbWriteTable(cricket_database, "bowling", bowling, overwrite = TRUE)
dbWriteTable(cricket_database, "batting_dismissals", batting_dismissals, overwrite = TRUE)
dbWriteTable(cricket_database, "results", results, overwrite = TRUE)

# list tables to check they are in the database
dbListTables(cricket_database)

# disconnect from database
dbDisconnect(cricket_database)




```